rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUserAuthenticated(userId) { 
      return isAuthenticated() && userId == request.auth.uid;
    }

    function isValidUserSchema(user) {
      return user.size() == 8
      && user.keys().hasOnly(['screenName', 'displayName', 'description', 'photoUrl','provider','providerUid','createdAt','updatedAt'])
      && 'screenName' in user && user.screenName is string
      && 'displayName' in user && user.displayName is string
      && 'description' in user && user.description is string
      && 'photoUrl' in user && user.photoUrl is string
      && 'provider' in user && user.provider is string
      && 'providerUid' in user && user.providerUid is string
      && 'createdAt' in user && user.createdAt is timestamp
      && 'updatedAt' in user && user.updatedAt is timestamp;
    }

    function isValidUserData(user) {
      return 1 <= user.screenName.size()
      && 1 <= user.displayName.size()
      && user.photoUrl.matches('^(https://).*')
      && user.provider.matches('twitter')
      && 1 <= user.providerUid.size();
    }

    match /users/{userId} {
      allow get: if isUserAuthenticated(userId);
      allow list: if isAuthenticated();
      allow create: if isUserAuthenticated(userId)
      && isValidUserSchema(request.resource.data)
      && isValidUserData(request.resource.data);
      allow update: if isUserAuthenticated(userId)
      && isValidUserSchema(request.resource.data)
      && isValidUserData(request.resource.data);
    }

    function isValidCounterSchema(counter) {
      return counter.size() == 2
      && counter.keys().hasOnly(['count','updatedAt'])
      && 'count' in counter && counter.count is number
      && 'updatedAt' in counter && counter.updatedAt is timestamp;
    }

    match /docCounters/users {
      allow create: if isAuthenticated()
      && isValidCounterSchema(request.resource.data);
      allow update: if isAuthenticated()
      && isValidCounterSchema(request.resource.data);
    }

    match /playlists/{playlistId} {
      allow get: if isUserAuthenticated(playlistId);
      allow list: if isAuthenticated();
      allow create: if isUserAuthenticated(playlistId);
      allow update: if isUserAuthenticated(playlistId);
    }
  }
}
